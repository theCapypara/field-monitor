using Gtk 4.0;
using Adw 1;

template $FieldMonitorServerScreen: Adw.Bin {
    title: bind window_title.title bidirectional;
    subtitle: bind window_title.subtitle bidirectional;
    notify::dynamic-resize => $on_self_dynamic_resize_changed() swapped;
    notify::scale-to-window => $on_self_scale_to_window_changed() swapped;
    notify::reveal-osd-controls => $on_self_reveal_osd_controls_changed() swapped;
    notify::force-disable-overlay-headerbar => $on_force_disable_overlay_headerbar_changed() swapped;
    unrealize => $on_self_unrealize() swapped;

    child: Adw.ToolbarView toolbar_view {
        top-bar-style: raised_border;

        styles [
            "connection-view-toolbarview"
        ]

        [top]
        Adw.HeaderBar header_bar {
            title-widget: Adw.WindowTitle window_title {};

            [start]
            Button button_fullscreen {
                hexpand: true;
                valign: start;
                halign: start;
                icon-name: "arrows-pointing-outward-symbolic";
                tooltip-text: _("Toggle Fullscreen");
                action-name: "win.fullscreen";
            }

            [start]
            Button {
                hexpand: true;
                valign: start;
                halign: start;
                icon-name: "sidebar-show-symbolic";
                tooltip-text: _("Show Navigation");
                action-name: "win.show-sidebar";
                clicked => $on_show_navigation_clicked() swapped;
            }

            [end]
            MenuButton menu_button {
                hexpand: true;
                valign: start;
                halign: end;
                primary: true;
                icon-name: "view-more-symbolic";
                tooltip-text: _("Menu");
            }
        }

        Stack outer_stack {
            vexpand: true;
            hexpand: true;
            transition-type: crossfade;

            StackPage {
                name: "status";

                child: Adw.Bin {
                    vexpand: true;
                    hexpand: true;

                    child: Box {
                        orientation: vertical;

                        WindowHandle {
                            height-request: 46;
                            hexpand: true;
                            vexpand: false;
                        }

                        Stack status_stack {
                            vexpand: true;
                            hexpand: true;
                            transition-type: crossfade;

                            StackPage {
                                name: "loading";

                                child: Adw.StatusPage loading_status_page {
                                    paintable: Adw.SpinnerPaintable {
                                        widget: loading_status_page;
                                    };

                                    title: _("Connecting...");
                                };
                            }

                            StackPage {
                                name: "disconnected";

                                child: Adw.StatusPage error_status_page {
                                    icon-name: "external-display-nointernal-symbolic";

                                    child: Box {
                                        halign: center;
                                        orientation: vertical;
                                        spacing: 6;

                                        Box {
                                            halign: center;
                                            orientation: horizontal;
                                            spacing: 6;

                                            Button {
                                                label: _("Close");
                                                halign: center;
                                                action-name: "view.close";

                                                styles [
                                                    "destructive-action"
                                                ]
                                            }

                                            Button {
                                                label: _("Reconnect");
                                                halign: center;
                                                action-name: "view.reconnect";
                                            }
                                        }

                                        Button show_output_button {
                                            label: _("Show Output");
                                            visible: false;
                                            halign: center;
                                            action-name: "view.show-output";
                                        }
                                    };
                                };
                            }
                        }
                    };

                    styles [
                        "connection-view-status"
                    ]
                };
            }

            StackPage {
                name: "connection";

                child: Overlay {
                    [overlay]
                    $FieldMonitorGrabNote grab_note {
                        halign: center;
                        valign: end;
                    }

                    child: $FieldMonitorFocusGrabber focus_grabber {
                        notify::grabbed => $on_focus_grabber_grabbed_changed() swapped;
                        vexpand: true;
                        hexpand: true;

                        Adw.Bin display_bin {
                            vexpand: true;
                            hexpand: true;
                        }
                    };
                };
            }
        }
    };
}
